#include<iostream>
using namespace std;

class Spisok
{
private:
	struct node
	{
		int elem;    // Значение элемента
        node* sled;  // Указатель на следующий элемент списка
	} *phead; // Указатель на начало списка
public:
	// Конструктор класса, инициализирующий начало списка
	Spisok() {phead = new(node);
		(*phead).sled = nullptr;}// Устанавливаем указатель на следующий элемент как nullptr или 0
	// Деструктор класса (для освобождения памяти, выделеной под список)
	~Spisok() {delete phead;}
	// Метод для построения списка пользователем
	void POSTROENIE();
	// Метод для вывода содержимого списка
	void VYVOD();
	// Метод для освобождения памяти списка
	void OCHISTKA();
};

void Spisok::POSTROENIE() {
	node* t; // Указатель на действующий элемент списка
	int el;  // Переменная для хранения вводимого пользователем элемента
	phead = new (node);// Создаение первого элемента списка
	t = phead; // Устанавливаем указатель на начальный элемент
	(*t).sled = NULL; // Указатель на начало, тк следующего элемента пока нет
	cout << "Вводите элементы звеньев списка: " << endl;
	cin >> el;
	while (el != 0) {
		(*t).sled = new(node); //Создание нового узла
		t = (*t).sled; // Переход на следующий элемент списка
		(*t).elem = el;  // Присваивание элементу нового узла значение el
		(*t).sled = NULL; // Указатель на 0 (пока последний элемент)
		cin >> el;
	}
}

void Spisok::VYVOD()
// Вывод содержимого однонаправленнго линейного списка
// С заглавным звеном
// phead - указатель на заглавное звено списка
{
	node* t; // Объявление указателя t на структуру node
	t = (*phead).sled; //Присваивание указателю t адреса 1 элемента списка
	cout << " Список :";
	while (t != NULL) { // Цикл выполняется пока указаьель t не будет равен 0
		cout << (*t).elem << " "; // Вывод значения узла
		t = (*t).sled; // Перемещения указателя на следующий узел
	}
	cout << endl;
}

void Spisok::OCHISTKA() {
	// Удаление однонаправлено списка из памяти
	// *phead - указатель на заглавное звено списка
	struct node *q, *q1; // Рабочие указатели
	q = phead;// Инициализация укаателя, указывающего на заголовочный узел
	q1 = (*q).sled; // Указатель q1 "опережает" указатель q.
	while (q1 != NULL) { // Цикл выполняется пока указаьель q1 не будет равен 0
		q = q1; // Передвижение указателя q на следующий узел списка(для удаления)
		q1 = (*q1).sled; // Так же перемещение указателя q1 на следующий узел списка(для продолжения цикла)
		delete q; // Удаление
	}
}
int main() {
	setlocale(0, "");
	Spisok nazva;
	// Вызов функий
	nazva.POSTROENIE();
	nazva.VYVOD();
	nazva.OCHISTKA();
	return 0;
}
